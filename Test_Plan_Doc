:sectnums:
:toc: left
:sectnumlevels: 5
:toclevels: 5

= Software Test Plan: VSC8584 (Viper) Linux 1G PHY Drivers Software Test Plan
Nagaraju Lakkaraju <raju.lakkaraju@microsemi.com>

_This document is written in ascidoctor, the sources are checked into git in the
following repository:
https://github.com/mscc-ent/TDxxxx-Linux-1G-PHY-Drivers-TestPlan, latest version can be
found/edited here:
https://github.com/mscc-ent/TDxxxx-Linux-1G-PHY-Drivers-TestPlan/blob/master/TDxxxx-Linux-1G-PHY-Drivers-TestPlan.adoc_

== Introduction

The purpose of this document is to describe the detailed-level SQA plan for 
VSC8584(Viper) MINI, Elise and Tesla PHY families feature which will test the 
Device Driver software under the Linux Open source. 
It may be extended to do SQA of more features and/or platforms in future.

[cols="10,10,10,10,10",options="header"]
|===

|
|Mini
|Elise
|Tesla (revE only)
|Viper

|SKUs in family
|VSC8530, VSC8531, VSC8540, VSC8541
|VSC8514
|VSC8504, VSC8552, VSC8572, VSC8574
|VSC8562, VSC8564, VSC8575, VSC8582, VSC8584

|Development board
|Beagle Bone Black (variant)
|Ocelot PCB-121 (PCIe only)
|Ocelot PCB-120
|Ocelot PCB-120

|SKU mounted on board
|VSC8531
|VSC8514
|VSC8574
|VSC8584

|Host Interface used
|RGMII
|QSGMII
|4xSGMII
|4xSGMII

|Host Interface supported
|RGMII, GMII
|QSGMIII
|SGMII, QSGMIII
|SGMII, QSGMIII

|Line Interface used
|1000BASE-T
|1000BASE-T
|1000BASE-T
|1000BASE-T

|Line Interface supported
|1000BASE-T
|1000BASE-T
|1000BASE-T, 100BASE-FX, 1000BASE-X
|1000BASE-T, 100BASE-FX, 1000BASE-X

|Basic PHY driver
|Already there
|Yes
|Yes
|Yes

|SyncE
|No
|No
|Yes
|Yes

|TS & PTP-Clock
|No
|No
|Yes
|Yes

|MACsec
|No
|No
|No
|Yes

|===

All SKUs within a given family can be supported by the same driver, the
differences is typically number of channels available on a physical chip,
and/or variants with smaller feature set.

All features mentioned above are to be upstreamed to the Linux kernel. All
devices must be upstreamed to UBoot with basic PHY support.

<<<

== Environment

The Ocelot boards PCB120, and PCB121 will be used as development, test and demo
environment. All boards is based on the Ocelot Chip which is already supported
by Switchdev, but new device tree files are needed (to reflect the board
differences).

PCB120 will use the internal MIPS processor, while PCB121 needs to be driven by
an external CPU over PCIe.

== Linux PHY Features

The following sections specify the different PHY features. Not all PHY SKUs
support all features, but if the PHY supports the feature, then it needs to be
supported by the device driver.

=== Basic PHY Features

This section lists the basic PHY features which are to be supported by the Linux
PHY driver.

==== Device Tree

All board configuration should be done by device trees. This section list the
parameters that should be configurable by DT.

===== Basic configuration:
* Device Under Test (DUT): PCB-120 (Ocelot) Switch with VSC8584(Viper) PHY
* Target Image: vmlinux.gz.itb (Contain Device Tree with Secure Boot)
* Connect Network port with external network and load image through "tftpboot"
* Login as "root"

===== Addresses and buses

The usual configuration of MIIM Address, and bus information should be
configured using device trees.

===== LED Modes

The device tree parameters needs to include the parameters for configuring LED
modes.
* Not supporting on PCB-120 Ocelot switch

===== Host interface

The host interface of the PHY needs to be configured by device trees. 
List of host interfaces to support: 
    GMII, 
    RGMII, 
    SGMII, 
    QSGMIII.

*** TBD

===== Line interface

The line interface of the PHY needs to be configured by device trees, possible
options are 1000BASE-T, 100BASE-FX, 1000BASE-X. The line interface can not be
changed at runtime, and dual media is not supported.

==== Auto negotiation:
Auto negotiation is an Ethernet procedure by which two connected devices choose 
common transmission parameters, such as speed and duplex mode. In this process, 
the connected devices first share their capabilities regarding these parameters 
and then choose the highest performance transmission mode they both support.

When Auto negotiation enable, PHY port need to configure with Link partner 
maximum capabilities automatically. Operational Link status should be show as UP
when Administrative link status configure as UP. When Auto negotiation disable, 
PHY port need to configure speed, duplex manually and match with Link partner 
port configuration. When configuration match on both sides then Link operational 
status should be UP.

====== Test Procedure:
Auto negotiation for 1Gbps with full duplex:
1. [Host] Configure Auto advertise as 1Gbps with full duplex (i.e. 0x3f) by using 
   ethtool.
2. [Host] Make sure that host interface should UP
3. [DUT] Capture the Link status display as "Link is Up - 1Gbps/Full - flow 
   control rx/tx"

Auto negotiation for 1Gbps with half duplex:
1. [Host] Configure Auto advertise as 1Gbps with half duplex (i.e. 0x1f) by using 
   ethtool.
2. [Host] Make sure that host interface should UP
3. [DUT] Capture the Link status display as "Link is Up - 1Gbps/Half - flow 
   control off"

Auto negotiation for 100Mbps with full duplex:
1. [Host] Configure Auto advertise as 100Mbps with full duplex (i.e. 0xf) by using 
   ethtool.
2. [Host] Make sure that host interface should UP
3. [DUT] Capture the Link status display as "Link is Up - 100Mbps/Full - flow 
   control rx/tx"

Auto negotiation for 100Mbps with half duplex:
1. [Host] Configure Auto advertise as 100Mbps with half duplex (i.e. 0x7) by using 
   ethtool.
2. [Host] Make sure that host interface should UP
3. [DUT] Capture the Link status display as "Link is Up - 100Mbps/Half - flow 
   control off"

Auto negotiation for 10Mbps with full duplex:
1. [Host] Configure Auto advertise as 10Mbps with full duplex (i.e. 0x3) by using 
   ethtool.
2. [Host] Make sure that host interface should UP
3. [DUT] Capture the Link status display as "Link is Up - 10Mbps/Full - flow 
   control rx/tx"

Auto negotiation for 10Mbps with half duplex:
1. [Host] Configure Auto advertise as 10Mbps with half duplex (i.e. 0x1) by using 
   ethtool.
2. [Host] Make sure that host interface should UP
3. [DUT] Capture the Link status display as "Link is Up - 10Mbps/Half - flow 
   control off"

Ref script: 017-phy-speed-ad.rb

==== Forced Speed Modes:
Port speed is in reference to the maximum amount of data that can pass through 
the port at a given second on the switches that connect your server to the 
Internet. The unit of measurement is in megabits per second (Mbps) or 
gigabits per second (Gbps). PHY support 3 speeds
i.e. 1Gbps or 100Mbps or 10Mbps
WhenPHY port configure for particular speed then Link partner need to configure 
the same speed to exchange the network data in devices. 

====== Test Procedure:
Forced Speed for 1 Gbps with full duplex:
1. [Host] Auto-negotiation disable/Off by using ethtool.
2. [Host] Configure port Speed as 1000 by using ethtool.
3. [Host] Configure port duplex as full by using ethtool.
4. [DUT] Auto-negotiation disable/Off by using ethtool.
5. [DUT] Configure port Speed as 1000 by using ethtool.
6. [DUT] Configure port duplex as full by using ethtool.
7. [Host] Make sure that host interface should UP
8. [DUT] Capture the Link status display as "Link is Up - 1Gbps/Full"

Forced Speed for 1 Gbps with half duplex:
1. [Host] Auto-negotiation disable/Off by using ethtool.
2. [Host] Configure port Speed as 1000 by using ethtool.
3. [Host] Configure port duplex as half by using ethtool.
4. [DUT] Auto-negotiation disable/Off by using ethtool.
5. [DUT] Configure port Speed as 1000 by using ethtool.
6. [DUT] Configure port duplex as half by using ethtool.
7. [Host] Make sure that host interface should UP
8. [DUT] Capture the Link status display as "Link is Up - 1Gbps/Half"

Forced Speed for 100 Mbps with full duplex:
1. [Host] Auto-negotiation disable/Off by using ethtool.
2. [Host] Configure port Speed as 100 by using ethtool.
3. [Host] Configure port duplex as full by using ethtool.
4. [DUT] Auto-negotiation disable/Off by using ethtool.
5. [DUT] Configure port Speed as 100 by using ethtool.
6. [DUT] Configure port duplex as full by using ethtool.
7. [Host] Make sure that host interface should UP
8. [DUT] Capture the Link status display as "Link is Up - 100Mbps/Full"

Forced Speed for 100 Mbps with half duplex:
1. [Host] Auto-negotiation disable/Off by using ethtool.
2. [Host] Configure port Speed as 100 by using ethtool.
3. [Host] Configure port duplex as half by using ethtool.
4. [DUT] Auto-negotiation disable/Off by using ethtool.
5. [DUT] Configure port Speed as 100 by using ethtool.
6. [DUT] Configure port duplex as half by using ethtool.
7. [Host] Make sure that host interface should UP
8. [DUT] Capture the Link status display as "Link is Up - 100Mbps/Half"

Forced Speed for 10 Mbps with full duplex:
1. [Host] Auto-negotiation disable/Off by using ethtool.
2. [Host] Configure port Speed as 10 by using ethtool.
3. [Host] Configure port duplex as full by using ethtool.
4. [DUT] Auto-negotiation disable/Off by using ethtool.
5. [DUT] Configure port Speed as 10 by using ethtool.
6. [DUT] Configure port duplex as full by using ethtool.
7. [Host] Make sure that host interface should UP
8. [DUT] Capture the Link status display as "Link is Up - 10Mbps/Full"

Forced Speed for 10 Mbps with half duplex:
1. [Host] Auto-negotiation disable/Off by using ethtool.
2. [Host] Configure port Speed as 10 by using ethtool.
3. [Host] Configure port duplex as half by using ethtool.
4. [DUT] Auto-negotiation disable/Off by using ethtool.
5. [DUT] Configure port Speed as 10 by using ethtool.
6. [DUT] Configure port duplex as half by using ethtool.
7. [Host] Make sure that host interface should UP
8. [DUT] Capture the Link status display as "Link is Up - 10Mbps/Half"

Ref script: 019-phy-force-speed.rb

==== Auto/Forced MDI-X:
MDI-X feature complaint with Clause 40 of IEEE 802.3-2008 allows to detect 
automatic cross over detection for all three speeds on the twisted pair interface.
Auto MDI-X detection and polarity correction are enabled in the device by default.

Link State with Auto/Forced MDI-X configure on DUT/Host shown below:
--------------------------------------------------------------------
	   | DUT		| Host			| Link-State|
--------------------------------------------------------------------
Case 1:	   | MDI-X: on (auto)	| MDI-X: off (auto)	| UP	    |
           | MDI-X: off (auto)	| MDI-X: on (auto)	|           |
--------------------------------------------------------------------
Case 2:	   | MDI-X: on (forced)	| MDI-X: off (auto)	| UP        |
--------------------------------------------------------------------
Case 3:	   | MDI-X: off (forced)| MDI-X: on (auto)	| UP        |
--------------------------------------------------------------------
Case 4:	   | MDI-X: off (auto)	| MDI-X: on (forced)	| UP        |
--------------------------------------------------------------------
Case 5:	   | MDI-X: on (auto)	| MDI-X: off (forced)	| UP        |
--------------------------------------------------------------------
Case 6:	   | MDI-X: on (forced)	| MDI-X: off (forced)	| UP        |
--------------------------------------------------------------------
Case 7:	   | MDI-X: off (forced)| MDI-X: on (forced)	| UP        |
--------------------------------------------------------------------
Case 8:	   | MDI-X: on (forced)	| MDI-X: on (forced)	| DOWN      |
--------------------------------------------------------------------
Case 9:	   | MDI-X: off (forced)| MDI-X: off (forced)	| DOWN      |
--------------------------------------------------------------------

Ref script: 020-phy-mdix.rb

==== Interrupts

The standard SMI/MDINT is supported by all PHYs and should therefore implement
the `config_intr` and `.ack_interrupt`.

Interrupts should also be used to get notification on when to fetch time-stamps.

*** TBD ***

==== Wake on Lan

The PHYs offers wake-on-lan support, and the PHY drivers should therefore
implement the `set_wol` and `get_wol` functions.

*** TBD ***

==== Downshifting

For operation in cabling environments that are incompatible with 1000BASE-T, the
PHY device provides an automatic link speed downshift option. When enabled, the
device automatically changes its 1000BASE-T autonegotiation advertisement to the
next slower speed after a set number of failed attempts at 1000BASE-T. No reset
is required to get out of this state when a subsequent link partner with
1000BASE-T support is connected. This feature is useful in setting up in
networks using older cable installations that include only pairs A and B, and
not pairs C and D.
Device allows to configure the automatic link down shift and the number of 
failed attempts to move to the slower speed. This test is to verify that down 
shift occurs if partner does not support 1000BASE-T.

This test case cover only configuration. Not functionality.
====== Test Procedure:
1. [DUT] Disable the downshift by using ethtool.
2. [DUT] Get the downshift status. It should be "Downshift disabled".
3. [DUT] Enable the downshift by using ethtool.
4. [DUT] Get the downshift status. It should be "Downshift count: 3" as default 
         count.
5. [DUT] Enable with count 5 downshift by using ethtool.
6. [DUT] Get the downshift status. It should be "Downshift count: 5"
7. [DUT] Enable with count 8 downshift by using ethtool.
6. [DUT] Get the downshift status. It should be "Cannot Set PHY downshift 
         count: Numerical result out of range". Count range from 2 to 5.

Ref script: 021-phy-downshift.rb

=== Firmware loading / init-scripts

Most of the PHYs requires firmware to be upgraded to offer optimal performance,
the firmware is stored in RAM, and therefore needs to be re-programmed at every
boot.

The firmware (internally in MSCC called init scripts) can be extracted from
vtss_phy_init_scripts.c which is part of the Unified API.

The firmware is typically less than 1024 bytes. If the firmware can be embedded
directly in the driver then that would be the preferred solution, if that is not
accepted upstream then the traditional methods for loading firmware should be
used.

=== MACsec

The 1G Viper PHY (and several of the 10G PHYs) supports MACsec. The Linux kernel
offer a SW implementation of MACsec, but there is currently no support for HW
accelerate the MACsec support.

The purpose of this effort is to add PHY-HW offload for MACsec, and implement
this as part of the Viper PHY driver.

The expectation is that user-space application should not notice if the MACsec
operations are performed by HW in the PHYs, or if it is done in SW (except for
performance being better).

This feature must also work in a SwitchDev setup where traffic is decrypted and
encrypted again when bridge from one physical link to another. In this case the
traffic is never copied to the CPU.

MACsec will be tested both with static configuration and with wpa_supplicant.

=== Time Stamping

Purpose of the time-stamping support is to enable PTP/1588 user-space
applications to use time-stamps done by the PHY.

To allow this, the PHY driver need to implement the following functions:

----
struct phy_driver {
    ...

    /* Handles ethtool queries for hardware time stamping. */
    int (*ts_info)(struct phy_device *phydev, struct ethtool_ts_info *ti);

    /* Handles SIOCSHWTSTAMP ioctl for hardware time stamping. */
    int  (*hwtstamp)(struct phy_device *phydev, struct ifreq *ifr);

    /*
     * Requests a Rx timestamp for 'skb'. If the skb is accepted,
     * the phy driver promises to deliver it using netif_rx() as
     * soon as a timestamp becomes available. One of the
     * PTP_CLASS_ values is passed in 'type'. The function must
     * return true if the skb is accepted for delivery.
     */
    bool (*rxtstamp)(struct phy_device *dev, struct sk_buff *skb, int type);

    /*
     * Requests a Tx timestamp for 'skb'. The phy driver promises
     * to deliver it using skb_complete_tx_timestamp() as soon as a
     * timestamp becomes available. One of the PTP_CLASS_ values
     * is passed in 'type'.
     */
    void (*txtstamp)(struct phy_device *dev, struct sk_buff *skb, int type);

    ...
};
----

Time-stamping requires a PTP clock which must also be covered by the PHY driver
and exposed by the `ptp_clock_register` function.

NOTE: In some of the SKUs, the PTP clocks is shared among several PHY channels.

The PHY driver must support both the 1-step and 2-step modes define by PTP (from
a driver perspective it means that `HWTSTAMP_TX_ON` and
`HWTSTAMP_TX_ONESTEP_SYNC` needs to be supported. All HWTSTAMP_FILTER_PTP_V2*
filters should be supported.

As this project will focus on the PHY driver, then all tests will be done with
bridge disabled.


=== Feature combination

One of the important features in the Viper PHY family is to combine MACsec and
PTP. The PHY supports both MACsec and time-stamping, which means that the PHY
has the ability to timestamp in the PHY, but still allow encryption of the
content.

It is essential that these two features works together.


=== SyncE

The idea in SyncE is to extract a frequency from the electric
signals carrying the ethernet data. This signal can then be used to drive a
DPLL, which can emit other clocks, which then can be used to driver the various
components on the board (including the phys not used for clock-input).

A board may look like illustrated below:

----
                +-------------------+                 +------------+
                |                   |                 |            |
      <-port-1->|  Chip containing  |<-phy1-serdes-1->|            |
                |  4 PHYs           |                 |            |
      <-port-2->|                   |<-phy1-serdes-2->|            |
                |    PHY-ID-1       |                 |            |
      <-port-3->|                   |<-phy1-serdes-3->|            |
                |                   |                 |            |
      <-port-4->|                   |<-phy1-serdes-4->|            |
                |                   |                 |            |
                +-------------------+                 |   Switch   |
                   |   |                              |            |
  +----------------+   |                              |            |
  |                    |                              |            |
  | +------------------+                              |            |
  | |                                                 |            |
  | |           +-------------------+                 |            |
  | |           |                   |                 |            |
  | | <-port-5->|  Chip containing  |<-phy2-serdes-1->|            |
  | |           |  4 PHYs           |                 |            |
  | | <-port-6->|                   |<-phy2-serdes-2->|            |
  | |           |    PHY-ID-2       |                 |            |
  | | <-port-7->|                   |<-phy2-serdes-3->|            |
  | |           |                   |                 |            |
  | | <-port-8->|                   |<-phy2-serdes-4->|            |
  | |           |                   |                 |            |
  | |           +-------------------+                 +------------+
  | |                     |    |                            ^
  | |                     |    |                            | i2c
  | |                     |    |                            v
  | |                     |    |      phy-2-ckock-1   +------------+
  | |                     |    +--------------------->|            |
  | |                     |                           |            |
  | |                     |           phy-2-ckock-2   |            |
  | |                     +-------------------------->|            |
  | |                                                 |  DPLL      |
  | |                                 phy-1-clock-1   |            |
  | +------------------------------------------------>|            |
  |                                                   |            |
  |                                   phy-1-clock-2   |            |
  +-------------------------------------------------->|            |
                                                      +------------+
----

Notice the following:

- 2 quad phys providing 8 ports
- The PHYs are connected to MACs inside the switch
- Each physical PHY provides 2 recovered clocks.
- All the clocks is combined in a DPLL, which may provide other clocks used to
  drive the various components.

Each PHY chip (containing 4 PHYs with different MDIO addresses etc), includes 2
muxes, and 2 dividers. This means that you can can "connect" <port-1> to
<clock-1> and <port-3> to <clock-2>. The frequency of the recovered clock
outputs is also configurable (by setting a divider, meaning that only specific
frequencies will be allowed), and the output frequency depends on port speed.

When running on copper PHYs, this feature will only work when the PHY is in
slave mode, meaning that we need a tunable (or some other flag) the
administrator can use to tell the aneg routine that this PHY wants to become the
slave.

What are the requirements:

- At runtime, in user-space, it must be possible to see what SyncE clocks
  exists, and what ports can be connected to them (port 5 can not be connected
  to a clock on PHY-ID-1).

- At runtime, in user-space, it must be possible to query what frequencies the
  PHY can emit as recovered clock (possible this will be an array specifying the
  allowed frequency per port speed).

- At runtime, in user-space, it must be possible configure what port, should
  drive what phy-clock-out at what frequency.

- At runtime, in user-space, it must be possible to see the status of this
  configuration (if the link speed is changed by the link-peer, then the
  configured frequency may be invalid).

<<<

== Out of scope features

This section describes major features that will not be included in the Linux
kernel PHY driver.

*This is not a complete list, HW may support features not listed here, which
will not be supported by the Linux PHY driver*.

The list is useful to collect notes on why the features are not included, and
what it would take to get them included.

=== Dual Media

If dual media is not supported by the Linux kernel then it will not be part of
this effort.

=== VeriPHY/Cable Diagnostic

Currently there are no upstream interface to support VeriPHY/Cable Diagnostic
and because if that it is not included in the project.

Expectations are that it can be supported fairly easy, but it can not be done
within the existing schedule.

=== EPG (Ethernet Packet Generator)

Currently there are no upstream interface to support Ethernet Packet Generator
in the PHY layer, and because if that it is not included in the project.

I think it will be hard to upstream, as the capabilities of the different PHYs
seems very different, which will make it hard make a common interface.

=== EEE

The `phy_init_eee`, `phy_get_eee_err`, `phy_ethtool_set_eee` and
`phy_ethtool_get_eee` does not require any PHY driver implementations as they
relay on standard registers. The PHY includes a `eee_broken_modes` flag which
may be used to disable certain modes, but all modes are enabled by default.

In this project we will leave all modes enabled - but we can not test EEE as we
have no MAC where the needed functionality is implemented.

=== ActiPHY

Currently there are no upstream interface to support ActiPHY and because if that
it is not included in the project.

No idea on how hard it would be to get included.

=== Start-of-frame pulse

No plans to support SOF. It is not well understood what the PHY driver are
suppose to implement this feature, and it is therefore no possible for us to
common on the effort.

=== Start-of-frame pulse

Warmstart will not be supported for this project.

=== Transparent clocks

The facilities to let the PHY update the correction time based on the reserved
field in the PTP packet will not be supported.

It is still a bit unclear how this feature should be integrated in the Linux
time-stamping interface.

=== VDDmac/edge-slowdown

This was removed from the scope as it is only relevant for RGMII/GMII, which is
only supported by MINI, and the MINI driver is created already.

<<<

== Milestones

To allow test, follow-up and integration by MSCC engineers we need to a
milestone every 4-8 week.

=== PHY-M1 May 31 2018

- Quentin: 8 days

- Viper PHY driver, on Ocelot DIN rail: 8 days -- Quentin

  Platform setup: 2 days
  Linux driver: 3 days
  U-Boot driver: 3 days

- Work starts with the Viper PHY, to be able to start working on
  MACsec as early as possible.

- Release date only achievable if the project really starts at the
  latest end of April.

- Milestone PHY-M1 contents:

  Linux and U-Boot driver for the Viper PHY, with basic feature set
  (no SyncE, no PTP, no MACsec).

=== PHY-M2 June 29 2018

- Quentin: 6 days

- Antoine: 7 days

- Elise PHY driver, on Ocelot Industrial: 5 days -- Quentin
  Platform setup: 2 days
  Linux driver: 3 days

- Upstreaming: 1 day -- Quentin

- MACsec development, step 1: 7 days -- Antoine

- Milestone PHY-M2 contents:

  Linux driver for Elise submitted upstream.

=== PHY-M3 July 31 2018

- Quentin: 9 days

- Antoine: 7 days

- Elise PHY driver, on Ocelot Industrial -- Quentin
  U-Boot driver: 3 days

- Tesla PHY driver, on Ocelot DIN rail: 6 days -- Quentin

  No platform setup, same platform as Viper PHY.
  Linux driver: 3 days
  U-Boot driver: 3 days

- MACsec development, step 2: 7 days -- Antoine

- Milestone PHY-M3 contents:

  Linux and U-Boot driver for the Telsa PHY, with basic feature set
  (no SyncE, no PTP), and U-Boot driver for Elise.

=== PHY-M4 September 28 2018

- Quentin: 9 days in August, 7 days in September -> 16 days

- Antoine: 7 days

- PHY timestamping for Telsa and Viper: 12 days -- Quentin
  Linux only

- Upstreaming: 4 days -- Quentin

- MACsec development, step 3: 7 days -- Antoine

- Milestone PHY-M4 contents:

  Improved Tesla and Viper PHY drivers with timestamping/PTP support.

  All PHY drivers sent upstream, including the timestamping/PTP
  support.

=== PHY-M5 October 31 2018

- Quentin: 7 days

- Antoine: 7 days

- SyncE support for Tesla and Viper, step 1: 7 days -- Quentin

- MACsec development, step 4: 7 days -- Antoine

- Milestone PHY-M5 contents:

  Initial version of MACsec support submitted upstream.

=== PHY-M6 November 30 2018

- Quentin: 8 days

- Antoine: 5 days

- SyncE support for Telsa and Viper, step 2: 5 days -- Quentin

- Upstreaming: 3 days -- Quentin

- MACsec development, step 5: 5 days -- Antoine

- Milestone PHY-M6 contents:

  Improved Telsa and Viper PHY drivers with SyncE support.

  All features submitted upstream.

=== PHY-M7 December 21 2018

- Quentin: 6 days

- Antoine: 5 days

- Bug fixes, additional improvements: 4 days -- Quentin

- Upstreaming: 2 days -- Quentin

- MACsec development, step 6: 5 days -- Antoine

- Milestone PHY-M7 contents:

  All features have been accepted upstream, or are on a good way to be
  accepted, MACsec included.
